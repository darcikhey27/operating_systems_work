!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALIAS_H_	alias/alias.h	2;"	d
Alias	alias/alias.h	/^typedef struct alias Alias;$/;"	t	typeref:struct:alias
HISTCOUNT	history/history.h	/^int HISTCOUNT;$/;"	v
HISTCOUNTER	ush.c	/^int HISTCOUNTER = 0;$/;"	v
HISTFILECOUNT	history/history.h	/^int HISTFILECOUNT;$/;"	v
HISTORY_H_	history/history.h	2;"	d
History	history/history.h	/^typedef struct history History;$/;"	t	typeref:struct:history
LINKEDLIST_H	linkedlist/linkedList.h	11;"	d
LISTUTILS_H	linkedlist/listUtils.h	11;"	d
LinkedList	linkedlist/linkedList.h	/^typedef struct linkedlist LinkedList;$/;"	t	typeref:struct:linkedlist
MAKEARGS_H	tokenize/makeArgs.h	2;"	d
MAX	linkedlist/listUtils.h	19;"	d
MAX	tokenize/makeArgs.h	10;"	d
MAX	utils/myUtils.h	17;"	d
MYUTILS_H	utils/myUtils.h	11;"	d
Node	linkedlist/linkedList.h	/^typedef struct node Node;$/;"	t	typeref:struct:node
PIPES_H	pipes/pipes.h	2;"	d
PROCESS_H	process/process.h	2;"	d
REQUIREDINCLUDES_H	linkedlist/requiredIncludes.h	9;"	d
addFirst	linkedlist/linkedList.c	/^void addFirst(LinkedList *theList, Node *nn) {$/;"	f
addHistItems	ush.c	/^void addHistItems(FILE *fin, LinkedList *histList) {$/;"	f
addLast	linkedlist/linkedList.c	/^void addLast(LinkedList* theList, Node *nn) {$/;"	f
alias	alias/alias.h	/^   char *alias;$/;"	m	struct:alias
alias	alias/alias.h	/^struct alias$/;"	s
argc	alias/alias.h	/^   int argc;$/;"	m	struct:alias
argc	history/history.h	/^   int argc;$/;"	m	struct:history
buildListTotal	linkedlist/listUtils.c	/^void buildListTotal(LinkedList * myList, int total, FILE * fin, $/;"	f
buildNode	linkedlist/listUtils.c	/^Node * buildNode(FILE * fin, void *(*buildData)(FILE * in) ) {$/;"	f
buildNode_Type	linkedlist/listUtils.c	/^Node * buildNode_Type(void * passedIn) {$/;"	f
buildNode_Type_string	linkedlist/listUtils.c	/^Node * buildNode_Type_string(char *passedIn, void *(*buildData)(char * string)) {$/;"	f
buildTypeAlias	alias/alias.c	/^void* buildTypeAlias(FILE *fin) {$/;"	f
buildTypeAlias_Prompt	alias/alias.c	/^void * buildTypeAlias_Prompt(FILE * fin) {$/;"	f
buildTypeAlias_string	alias/alias.c	/^void *buildTypeAlias_string(char* string) {$/;"	f
buildTypeCommand	history/history.c	/^void* buildTypeCommand(FILE *fin) {$/;"	f
buildTypeCommand_Prompt	history/history.c	/^void * buildTypeCommand_Prompt(FILE * fin) {$/;"	f
buildTypeHistory_string	history/history.c	/^void * buildTypeHistory_string(char *string) {$/;"	f
checkForAlias	ush.c	/^void checkForAlias(char *line, LinkedList *theList) {$/;"	f
clean	tokenize/makeArgs.c	/^void clean(int argc, char **argv) {$/;"	f
cleanTypeAlias	alias/alias.c	/^void cleanTypeAlias(void * ptr) {$/;"	f
cleanTypeCommand	history/history.c	/^void cleanTypeCommand(void * ptr) {$/;"	f
clearList	linkedlist/linkedList.c	/^void clearList(LinkedList * theList, void (*removeData)(void *)) {$/;"	f
command	history/history.h	/^   char * command;$/;"	m	struct:history
compareAlias	alias/alias.c	/^int compareAlias(const void * p1, const void * p2) {$/;"	f
compareCommand	history/history.c	/^int compareCommand(const void * p1, const void * p2) {$/;"	f
containsPipe	pipes/pipes.c	/^int containsPipe(char *s) {$/;"	f
data	linkedlist/linkedList.h	/^    void * data;$/;"	m	struct:node
forkIt	process/process.c	/^void forkIt(char ** argv) {$/;"	f
head	linkedlist/linkedList.h	/^    Node * head;$/;"	m	struct:linkedlist
history	history/history.h	/^struct history$/;"	s
linkedList	linkedlist/linkedList.c	/^LinkedList* linkedList() {$/;"	f
linkedlist	linkedlist/linkedList.h	/^struct linkedlist$/;"	s
main	ush.c	/^int main()$/;"	f
makeArgs	tokenize/makeArgs.c	/^int makeArgs(char *s, char *** argv) {$/;"	f
menu	utils/myUtils.c	/^int menu()$/;"	f
next	linkedlist/linkedList.h	/^    struct node * next;$/;"	m	struct:node	typeref:struct:node::node
node	linkedlist/linkedList.h	/^struct node$/;"	s
openFile	ush.c	/^FILE* openFile(char *filename) {$/;"	f
parsePostPipe	pipes/pipes.c	/^char** parsePostPipe(char *s, int *postCount) {$/;"	f
parsePrePipe	pipes/pipes.c	/^char** parsePrePipe(char *s, int* preCount) {$/;"	f
pipeIt	pipes/pipes.c	/^void pipeIt(char ** prePipe, char ** postPipe) {$/;"	f
prev	linkedlist/linkedList.h	/^    struct node * prev;$/;"	m	struct:node	typeref:struct:node::node
printList	linkedlist/linkedList.c	/^void printList(const LinkedList * theList, void (*convertData)(void *)) {$/;"	f
printTypeAlias	alias/alias.c	/^void printTypeAlias(void* passedIn) {$/;"	f
printTypeCommand	history/history.c	/^void printTypeCommand(void* passedIn) {$/;"	f
printargs	tokenize/makeArgs.c	/^void printargs(int argc, char **argv)$/;"	f
processString	ush.c	/^void processString(char *string) {$/;"	f
removeFirst	linkedlist/linkedList.c	/^void removeFirst(LinkedList * theList, void (*removeData)(void *)) {$/;"	f
removeItem	linkedlist/linkedList.c	/^void removeItem(LinkedList * theList, Node * nn, void (*removeData)(void *), $/;"	f
removeLast	linkedlist/linkedList.c	/^void removeLast(LinkedList * theList, void (*removeData)(void *)) {$/;"	f
setHistoryCounts	ush.c	/^void setHistoryCounts(FILE *fin, LinkedList *theList) {$/;"	f
setHistoryCountsDefaults	ush.c	/^void setHistoryCountsDefaults() {$/;"	f
size	linkedlist/linkedList.h	/^    int size;$/;"	m	struct:linkedlist
sort	linkedlist/listUtils.c	/^void sort(LinkedList * theList, int (*compare)(const void *, const void *)) {$/;"	f
strip	utils/myUtils.c	/^void strip(char *array)$/;"	f
tokenized_command	alias/alias.h	/^   char **tokenized_command;$/;"	m	struct:alias
tokenized_command	history/history.h	/^   char ** tokenized_command;$/;"	m	struct:history
